// Code generated by mockery v2.1.0. DO NOT EDIT.

package jobservice

import (
	context "context"

	jobservice "github.com/goharbor/harbor/src/controller/jobservice"
	mock "github.com/stretchr/testify/mock"

	q "github.com/goharbor/harbor/src/lib/q"
)

// ExecutionController is an autogenerated mock type for the ExecutionController type
type ExecutionController struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, vendorType, query
func (_m *ExecutionController) Count(ctx context.Context, vendorType string, query *q.Query) (int64, error) {
	ret := _m.Called(ctx, vendorType, query)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, *q.Query) int64); ok {
		r0 = rf(ctx, vendorType, query)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *q.Query) error); ok {
		r1 = rf(ctx, vendorType, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, vendorType, executionID
func (_m *ExecutionController) Get(ctx context.Context, vendorType string, executionID int64) (*jobservice.Execution, error) {
	ret := _m.Called(ctx, vendorType, executionID)

	var r0 *jobservice.Execution
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *jobservice.Execution); ok {
		r0 = rf(ctx, vendorType, executionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jobservice.Execution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, vendorType, executionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, vendorType, query
func (_m *ExecutionController) List(ctx context.Context, vendorType string, query *q.Query) ([]*jobservice.Execution, error) {
	ret := _m.Called(ctx, vendorType, query)

	var r0 []*jobservice.Execution
	if rf, ok := ret.Get(0).(func(context.Context, string, *q.Query) []*jobservice.Execution); ok {
		r0 = rf(ctx, vendorType, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*jobservice.Execution)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *q.Query) error); ok {
		r1 = rf(ctx, vendorType, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
